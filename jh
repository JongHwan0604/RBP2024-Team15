import rclpy
import numpy as np
import cv2
from rclpy.node import Node
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
from std_msgs.msg import Header

class DetermineColor(Node):
    def __init__(self):
        super().__init__('color_detector')
        self.image_sub = self.create_subscription(Image, '/camera/color/image_raw', self.callback, 10)
        self.color_pub = self.create_publisher(Header, '/rotate_cmd', 10)
        self.bridge = CvBridge()
        self.tracker = cv2.TrackerCSRT_create()  # CSRT 트래커 생성
        self.initBB = None  # 트래킹할 객체의 초기 바운딩 박스

    def callback(self, data):
        try:
            # 이미지 토픽 수신
            image = self.bridge.imgmsg_to_cv2(data, 'bgr8')

            # 회전 명령 메시지 준비
            msg = Header()
            msg.stamp = data.header.stamp
            msg.frame_id = '0'  # 기본값: STOP

            # 초기 바운딩 박스 설정
            if self.initBB is None:
                self.initBB = cv2.selectROI("Frame", image, fromCenter=False, showCrosshair=True)
                self.tracker.init(image, self.initBB)
                cv2.destroyWindow("Frame")

            # 트래킹 업데이트
            (success, box) = self.tracker.update(image)

            if success:
                (x, y, w, h) = [int(v) for v in box]
                cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)

                # 트래킹한 영역 내에서 색상 분석
                roi = image[y:y+h, x:x+w]
                hsv_roi = cv2.cvtColor(roi, cv2.COLOR_BGR2HSV)

                lower_black = np.array([0, 0, 0], dtype=np.uint8)
                upper_black = np.array([80, 100, 100], dtype=np.uint8)

                Rtotal, Gtotal, Btotal = 0, 0, 0

                mask_black = cv2.inRange(hsv_roi, lower_black, upper_black)
                non_black_roi = cv2.bitwise_and(hsv_roi, hsv_roi, mask=~mask_black)

                Rtotal += np.sum((non_black_roi[:, :, 0] >= 0) & (non_black_roi[:, :, 0] <= 10))
                Rtotal += np.sum((non_black_roi[:, :, 0] >= 170) & (non_black_roi[:, :, 0] <= 180))
                Gtotal += np.sum((non_black_roi[:, :, 0] >= 50) & (non_black_roi[:, :, 0] <= 70))
                Btotal += np.sum((non_black_roi[:, :, 0] >= 110) & (non_black_roi[:, :, 0] <= 130))

                if Rtotal > Gtotal and Rtotal > Btotal:
                    msg.frame_id = '-1'  # CW
                elif Gtotal > Rtotal and Gtotal > Btotal:
                    msg.frame_id = '0'  # STOP
                else:
                    msg.frame_id = '+1'  # CCW

            self.color_pub.publish(msg)

        except CvBridgeError as e:
            self.get_logger().error(f'Failed to convert image: {e}')
        except Exception as e:
            self.get_logger().error(f'Unexpected error: {e}')

if __name__ == '__main__':
    rclpy.init()
    detector = DetermineColor()
    rclpy.spin(detector)
    detector.destroy_node()
    rclpy.shutdown()


