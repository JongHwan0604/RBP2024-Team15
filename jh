import rclpy
import numpy as np
import cv2
from rclpy.node import Node

from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
from std_msgs.msg import Header

class DetermineColor(Node):
    def __init__(self):
        super().__init__('color_detector')
        self.image_sub = self.create_subscription(Image, '/camera/color/image_raw', self.callback, 10)
        self.color_pub = self.create_publisher(Header, '/rotate_cmd', 10)
        self.bridge = CvBridge()

    def callback(self, data):
        try:
            # 이미지 토픽 수신
            image = self.bridge.imgmsg_to_cv2(data, 'bgr8')
            
            # 이미지 전처리
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            blurred = cv2.GaussianBlur(gray, (7, 7), 0)
            edged = cv2.Canny(blurred, 50, 150)
            
            # 윤곽선 검출
            contours, _ = cv2.findContours(edged.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            # 가장 큰 윤곽선 찾기
            if contours:
                largest_contour = max(contours, key=cv2.contourArea)
                rect = cv2.minAreaRect(largest_contour)  # 회전된 사각형 영역 얻기
                box = cv2.boxPoints(rect)  # 회전된 사각형의 꼭짓점 계산
                box = np.int0(box)
                
                # 회전된 사각형 영역 내의 픽셀 분석
                mask = np.zeros_like(gray)  # 마스크 초기화
                cv2.drawContours(mask, [box], 0, (255, 255, 255), -1)  # 회전된 사각형으로 마스크 생성
                pixels = cv2.bitwise_and(image, image, mask=mask)  # 마스크 적용하여 픽셀 추출
                
                # 색상 분석
                hsv = cv2.cvtColor(pixels, cv2.COLOR_BGR2HSV)
                mask_red = cv2.inRange(hsv, (0, 70, 50), (10, 255, 255)) | cv2.inRange(hsv, (170, 70, 50), (180, 255, 255))
                mask_green = cv2.inRange(hsv, (50, 70, 50), (70, 255, 255))
                mask_blue = cv2.inRange(hsv, (110, 70, 50), (130, 255, 255))
                
                # 색상에 따른 회전 방향 결정
                Rtotal = cv2.countNonZero(mask_red)
                Gtotal = cv2.countNonZero(mask_green)
                Btotal = cv2.countNonZero(mask_blue)

                # prepare rotate_cmd msg
                msg = Header()
                msg = data.header
                if Rtotal > Gtotal and Rtotal > Btotal:
                    msg.frame_id = '-1'  # 시계 방향
                elif Gtotal > Rtotal and Gtotal > Btotal:
                    msg.frame_id = '0'   # 정지
                else:
                    msg.frame_id = '+1'  # 반시계 방향

                # 색상 상태 발행
                self.color_pub.publish(msg)
        except CvBridgeError as e:
            self.get_logger().error('이미지 변환 실패: %s' % e)

if __name__ == '__main__':
    rclpy.init()
    detector = DetermineColor()
    rclpy.spin(detector)
    detector.destroy_node()
    rclpy.shutdown()

